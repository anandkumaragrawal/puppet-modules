<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>DOCKER_API=http://bx-dh01.lunetix.org:2375

# wipe out workspace
rm -rf *

# download deployment
curl -o ticket-monster.war &quot;http://bx-builder.lunetix.org:8081/nexus/service/local/artifact/maven/content?g=org.jboss.examples&amp;a=ticket-monster&amp;v=LATEST&amp;r=snapshots&amp;e=war&quot;

# download puppet config
curl -o appconfig.pp &quot;http://bx-builder.lunetix.org:8081/nexus/service/local/artifact/maven/content?g=org.jboss.examples&amp;a=ticket-monster&amp;v=LATEST&amp;r=snapshots&amp;e=puppet&quot;

# create Dockerfile
cat &gt;Dockerfile &lt;&lt;EOF
FROM eap

USER root
RUN yum-config-manager --enable rhel-7-server-satellite-tools-6.1-rpms; yum -y install puppet procps-ng less

USER jbosseap
ADD ticket-monster.war /usr/share/jbossas/standalone/deployments/ticket-monster.war
ADD appconfig.pp /tmp/appconfig.pp

USER root
RUN puppet apply /tmp/appconfig.pp
EOF

# pack docker image definition
tar zcf dockerfile.tar.gz ticket-monster.war appconfig.pp Dockerfile
# tar zcf dockerfile.tar.gz ticket-monster.war Dockerfile

# build docker image
curl -v -X POST -H &quot;Content-Type: application/tar&quot; --data-binary &apos;@dockerfile.tar.gz&apos; &quot;$DOCKER_API/build?t=eap-ticket-monster-prod-$BUILD_NUMBER&quot;

# create container
CONTAINER_ID=$(curl -v -X POST -H &quot;Content-Type: application/json&quot; &quot;$DOCKER_API/containers/create?name=ticket-monster-prod-$BUILD_NUMBER&quot; -d &quot;{\&quot;Image\&quot;:\&quot;eap-ticket-monster-prod-$BUILD_NUMBER\&quot;}&quot; | jq .Id | tr -d &quot;\&quot;&quot;)
HOSTNAME=$(curl -v -X GET &quot;$DOCKER_API/containers/$CONTAINER_ID/json&quot; | jq .Config.Hostname | tr -d &quot;\&quot;&quot;)

# start the container
curl -v -X POST -H &quot;Content-Type: application/json&quot; &quot;$DOCKER_API/containers/$HOSTNAME/start&quot; -d &quot;{\&quot;PublishAllPorts\&quot;:true}&quot;

EAP_HTTP_PORT=$(curl -X GET &quot;$DOCKER_API/containers/$CONTAINER_ID/json&quot; | jq &apos;.NetworkSettings.Ports.&quot;8080/tcp&quot;[0].HostPort&apos; | tr -d &quot;\&quot;&quot;)
EAP_MGMT_PORT=$(curl -X GET &quot;$DOCKER_API/containers/$CONTAINER_ID/json&quot; | jq &apos;.NetworkSettings.Ports.&quot;9990/tcp&quot;[0].HostPort&apos; | tr -d &quot;\&quot;&quot;)

EAP_HTTP_URL=$(echo $DOCKER_API | sed &quot;s/:[0-9]\{1,\}/:$EAP_HTTP_PORT/g&quot;)
EAP_MGMT_URL=$(echo $DOCKER_API | sed &quot;s/:[0-9]\{1,\}/:$EAP_MGMT_PORT/g&quot;)
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>